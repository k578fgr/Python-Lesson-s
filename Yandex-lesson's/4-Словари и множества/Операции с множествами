Чтобы добавить новый элемент в множество, к нему применяют метод add()


Пример

playlist = {
    'Venus',
    'Yesterday',
    'Fireball',
    'Time',
    'Poison'
}

playlist.add('Thunderstruck')
print(playlist)
## Будет напечатано: 
## {'Yesterday', 'Fireball', 'Thunderstruck', 'Poison', 'Venus', 'Time'}
## Элементы множеств никогда не соблюдают порядок! 

Объединение двух множеств
Множества в Python можно объединять. 
Например, можно составить из двух новогодних плейлистов один общий, да так, чтобы ни одна песня не повторялась.
Метод union() применяют для объединения двух множеств. 
Метод применяется к одному множеству, а в аргументе передаётся второе.

Соединяет оба и получится третье
playlist_1 = {'Три белых коня', 'Happy new year', 'Снежинка'}
playlist_2 = {'Last christmas', 'Снежинка', 'Happy new year'}
playlist_3 = playlist_1.union(playlist_2)

print(playlist_3)

Результат

{'Last christmas', 'Happy new year', 'Снежинка', 'Три белых коня'}


# Поиск различий в двух множествах
Если нужно найти песни, которые присутствуют в одном плейлисте, но отсутствуют во втором — поможет метод difference().

playlist_1 = {'Голубой вагон', 'Облака', 'Yesterday', 'Наше лето'}
playlist_2 = {'Наше лето', 'Голубой вагон', 'Облака'}
playlist_3 = playlist_1.difference(playlist_2)

print(playlist_3)

Результат

{'Yesterday'}

films_1 = {'Форсаж', 'Достучаться до небес', 'Мстители: война бесконечности'}
films_2 = {'Мстители: война бесконечности', 'Форсаж', 'Матрица'}
films_3 = films_1.intersection(films_2)

print(films_3)

Результат

{'Мстители: война бесконечности', 'Форсаж'}
