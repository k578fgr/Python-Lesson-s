Коллекции в Python
Перечень всех музыкантов этой группы вы уже сохраняли в списке — структуре, состоящей из нескольких элементов; список list — это один из типов данных в Python.

# Объявляем список bremen_musicians 
bremen_musicians = ['Трубадур', 'Кот', 'Пёс', 'Осёл', 'Петух'] 
Тип данных list

 С технической точки зрения это нормально и не вызовет проблем в работе программы. 
 Но читать такой код неудобно, строка может оказаться очень длинной:

Пример:

concert_songs = ['Ничего на свете лучше нету', 'Мы к вам заехали на час', 'Рок-колыбельная', 'Луч Солнца Золотого', 'Куда ты, тропинка, меня завела', 'А как известно, мы народ горячий']

for i in concert_songs:

  print(i)

 Результат:

Ничего на свете лучше нету
Мы к вам заехали на час
Рок-колыбельная
Луч Солнца Золотого
Куда ты, тропинка, меня завела
А как известно, мы на�од горячий

На работу кода это не влияет, но выглядит лучше
concert_songs = [
    'Ничего на свете лучше нету',
    'Мы к вам заехали на час',
    'Рок-колыбельная',
    'Луч Солнца Золотого',
    'Куда ты, тропинка, меня завела',
    'А как известно, мы народ горячий'
] 

Множества (set)
Одна из разновидностей коллекций в Python — это множества, тип данных set.
По структуре множества очень похожи на списки: в коде они записываются как перечень элементов, разделённых запятой. 
Элементы множества замыкаются в фигурные скобки { }.

concert_songs = {
    'Ничего на свете лучше нету',
    'Мы к вам заехали на час',
    'Рок-колыбельная',
    'Луч Солнца Золотого',
    'Ничего на свете лучше нету',
    'Куда ты, тропинка, меня завела',
    'А как известно, мы народ горячий'
}
# Выясним, к какому типу данных принадлежит переменная concert_songs
# для этого есть встроенная в Python функция type()
print(type(concert_songs))

# Напечатаем содержимое переменной concert_songs
print(concert_songs)

Результат каждый раз разный

Песня «Ничего на свете лучше нету» в исходном коде упомянута дважды, но на печать она выводится лишь один раз: 
Python автоматически удаляет из множества дубликаты, 
оставляя лишь уникальные значения.

Запустите код, посмотрите, что будет при обращении по индексу к элементу списка и что случится, 
если обратиться по индексу к элементу множества.

# Объявляем список bremen_musicians 
bremen_musicians = ['Трубадур', 'Кот', 'Пёс', 'Осёл', 'Петух']

# Обращаемся к элементу по индексу
print(bremen_musicians[1])
# Будет напечатано: Кот

# Объявим множество songs (фигурные скобки!)
songs = {
    'Ничего на свете лучше нету',
    'Мы к вам заехали на час',
    'Рок-колыбельная'
}

# Обращаемся к элементу по индексу
print(songs[2])
# "Ошибка: set не поддерживает индексы"


Я немного изменил код и теперь без ошибки

# Объявляем список bremen_musicians 
bremen_musicians = ['Трубадур', 'Кот', 'Пёс', 'Осёл', 'Петух']

# Обращаемся к элементу по индексу
print(bremen_musicians[1])
# Будет напечатано: Кот

# Объявим множество songs (фигурные скобки!)
songs = {
    'Ничего на свете лучше нету',
    'Мы к вам заехали на час',
    'Рок-колыбельная'
}

# Обращаемся к элементу по индексу
print(type(songs))
# "Ошибка: set не поддерживает индексы"
print(songs)

Результат

Кот
<class 'set'>
{'Ничего на свете лучше нету', 'Мы к вам заехали на час', 'Рок-колыбельная'}

Чтобы перечень не повторялся для этого и существует функция set

songs_list = [
    'Мы к вам заехали на час',
    'А как известно, мы народ горячий',
    'Куда ты, тропинка, меня завела',
    'Луч Солнца Золотого',
    'Рок-колыбельная',
    'Рок-колыбельная',
    'Куда ты, тропинка, меня завела',
    'А как известно, мы народ горячий',
    'Луч Солнца Золотого',
    'Ничего на свете лучше нету',
    'А как известно, мы народ горячий',
    'Луч Солнца Золотого',
    'Мы к вам заехали на час',
    'Ничего на свете лучше нету',
    'Куда ты, тропинка, меня завела',
    'Луч Солнца Золотого'
]

# Преобразуем список songs_list в сет
# и запишем этот сет в переменную unique_songs:
unique_songs = set(songs_list)

print(unique_songs)

Результат

{'Луч Солнца Золотого', 'А как известно, мы народ горячий', 'Мы к вам заехали на час', 'Рок-колыбельная',