Есть и ещё одно преимущество: размер 
куба задаётся лишь в одном месте кода — при вызове calc_cube(). 
Это уменьшает вероятность ошибки и упрощает работу с программой.

# Функция для вычисления периметра куба.
def calc_cube_perimeter(side):
    return side * 12

# Функция для вычисления площади куба.
def calc_cube_area(side):
    one_face = side * side
    cube_area = one_face * 6
    return cube_area

# Основная функция, которая принимает длину ребра куба
def calc_cube(side):
    # Вызываем функцию, рассчитывающую периметр
    # и передаём в неё размер куба
    one_cube_perimeter = calc_cube_perimeter(side)
    full_length = one_cube_perimeter * 8

    # Вызываем функцию, рассчитывающую площадь стекла
    # и передаём в неё размер куба
    one_cube_area = calc_cube_area(side)
    full_area = one_cube_area * 8

    print('Для 8 кубов понадобится палок (м):', full_length, 'и стекла (кв.м):', full_area)

# В результате остался лишь один вызов "основной" функции,
# а она уже вызовет две вспомогательные
calc_cube(3) 

Пример функции которая перемножает два числа

def multiplication(multiplier_1, multiplier_2):
    print(multiplier_1 * multiplier_2)

# Дальше начинается код, который расположен вне функции:
# Python понимает это по отсутствию отступов.

# Вызов функции multiplication()
multiplication(7, 6)

Результат

42


def multiplication(multiplier_1, multiplier_2):
    print(multiplier_1 * multiplier_2)

    multiplication(7, 8)

multiplication(5, 6) 

При первом вызове функция напечатает 30,
 а затем закрутится в бесконечном повторении, вызывая сама себя при каждом новом вызове. 

Здесь функция 1, вызывает функцию 2 и так до бесконечности
def func_one():
    print('Раз')
    func_two()

def func_two():
    print('Два')
    func_one()

func_one() # Вызываем функцию func_one() 

Будет ошибка RecursionError

Пример если добавить две переменные

# Функция для вычисления периметра кубов.
def calc_cube_perimeter(side):
    return side * 12


# Функция для вычисления площади кубов.
def calc_cube_area(side):
    one_face = side * side
    cube_area = one_face * 6
    return cube_area


# Дополните объявление функции: 
# теперь должна принимать два параметра -
# длину ребра куба и количество кубов.
def calc_cube(side, amount):
    # Вызываем функцию, рассчитывающую периметр
    # и передаём в неё размер куба
    one_cube_perimeter = calc_cube_perimeter(side)

    # Здесь вместо многоточия должна стоять переменная, 
    # хранящая количество кубов, переданное во втором аргументе.
    full_length = one_cube_perimeter * amount

    # Вызываем функцию, рассчитывающую площадь стекла
    # и передаём в неё размер куба
    one_cube_area = calc_cube_area(side)

    # Здесь вместо многоточия должна стоять переменная, 
    # хранящая количество кубов, переданное во втором аргументе.
    full_area = one_cube_area * amount

    # В этой строке замените многоточие на переменную, хранящую количество кубов
    print('Для', amount, 'кубов понадобится палок (м):', full_length, 'и стекла (кв.м):', full_area)


# Для проверки работы кода вызываем функцию с двумя аргументами: 
# 3 - это размер ребра куба,
# 2 - это необходимое количество кубов
calc_cube(3, 2)

Результат

Для 2 кубов понадобится палок (м): 72 и стекла (кв.м): 108

def calc_cube_perimeter(side):
    return side * 12


def calc_cube_area(side):
    one_face = side * side
    cube_area = one_face * 6
    return cube_area


def calc_cube(side, amount):
    one_cube_perimeter = calc_cube_perimeter(side)
    full_length = one_cube_perimeter * amount
    one_cube_area = calc_cube_area(side)
    full_area = one_cube_area * amount
    print('Для', amount, 'кубов понадобится палок (м):', full_length, 'и стекла (кв.м):', full_area)


# Ниже напишите три вызова функции calc_cube().
# Каждый вызов должен быть на отдельной строке.
calc_cube(2, 4)
calc_cube(0.5, 26)
calc_cube(0.61, 6)

Результат

Для 4 кубов понадобится палок (м): 96 и стекла (кв.м): 96
Для 26 кубов понадобится палок (м): 156.0 и стекла (кв.м): 39.0
Для 6 кубов понадобится палок (м): 43.92 и стекла (кв.м): 13.395599999999998