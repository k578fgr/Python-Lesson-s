    Циклы
    Отступы в циклах
    Ветвления
    Множественные ветвления
    Логические выражения
    Составные логические выражения

    Возьмём, для примера, список всемирно известных бременских музыкантов. 

bremen_musicians = ['Кот', 'Пёс', 'Трубадур', 'Осёл', 'Петух'] 

На афише необходимо напечатать имена всех музыкантов, вот таким образом:

Кот
Пёс
Трубадур
Осёл
Петух 

Как это сделать в Python? Можно вручную прописать вывод каждого элемента:

print(bremen_musicians[0])
print(bremen_musicians[1])
... 

Придётся пять раз писать один и тот же код. А если в списке не скромная рок-группа, а симфонический оркестр и академический хор в придачу?
Задача — точно как с тарелками: нужно взять первый элемент списка bremen_musicians, напечатать через print(), потом взять следующий элемент... и продолжать работу до тех пор, пока не будет обработан последний элемент списка.
Для выполнения таких операций придумали циклы — программные конструкции, выполняющие определённые действия до тех пор, пока выполняется заданное условие.
Как это пишется
Объявление цикла
Чтобы программа поняла, что сейчас начнётся цикл — нужно сообщить ей об этом специальными словами: объявить цикл. В Python есть несколько разновидностей циклов; перебирать список проще всего циклом for … in …, с него и начнём.
Цикл в Python объявляется ключевыми словами for и in; после объявления ставится двоеточие. Ниже объявления пишут тело цикла — код, который описывает, что же нужно сделать с каждым элементом списка.

for переменная in список_элементов: # Вот оно, объявление цикла
        # Тут будет тело цикла. 

В условии цикла после for указывают имя переменной, в которую будут поочерёдно передаваться элементы из обрабатываемого списка, а после in ставится имя списка, который надо обработать. 
Продолжая метафору, «список элементов» — это груда немытых тарелок, а «переменная, объявленная в условии цикла» — это очередная взятая из груды тарелка.
Цикл автоматически прекратит работу, когда переберёт все элементы списка.
Имя переменной в цикле вы можете дать любое, но традиционно эти имена образуют от имени обрабатываемого списка, в единственном числе. Например, если список называется musicians, то переменную лучше назвать musician; если список называется pigs — переменную называют pig.
Тело цикла
На следующей строке после объявления цикла пишут его тело. Каждая строка тела цикла обязательно отбивается от начала строки четырьмя пробелами:

for переменная in список_элементов:
    # Тут тело цикла: код, который выполняется для каждого элемента
    # Здесь можно обработать переменную, объявленную в условии цикла,
    # например, напечатать её значение: print(переменная) 

Теперь можно написать цикл, который автоматически напечатает имена всех этих хиппи из команды «Бременские музыканты».

bremen_musicians = ['Кот', 'Пёс', 'Трубадур', 'Осёл', 'Петух']

for musician in bremen_musicians:
    # Каждый элемент списка bremen_musicians 
    # по очереди будет передан в переменную musician
    # и напечатан
    print(musician)

# Здесь может быть какой-то код, который выполнится
# только после того, как цикл закончит работу 
print(bremen_musicians[0])
print(bremen_musicians[1])
...


Цикл берёт значение первого элемента из списка bremen_musicians и передаёт его в переменную musician. Затем выполняется код в теле цикла: печатается содержимое переменной musician. 
После этого начнётся новый «круг», со следующим элементом списка. И так будет продолжаться до тех пор, пока цикл не переберёт весь список. 
Каждый такой «круг» называется итерацией цикла.
Когда список закончится — программа выйдет из цикла; после этого сработает код, который написан после цикла.
Пуск!
Запустите код и посмотрите на результат выполнения. Добавьте в список несколько новых музыкантов (Атаманша из сказки вполне может быть на бэк-вокале) и запустите код заново.
